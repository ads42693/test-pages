name: Deploy Jekyll with Dynamic Wikis

on:
  push:
    branches: [develop]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load Wiki Config
        id: wiki-config
        run: |
          WIKIS_JSON=$(ruby -r yaml -r json -e '
            begin
              puts YAML.load_file("config/wikis.yml")["wikis"].to_json
            rescue
              puts [].to_json
            end
          ')
          echo "WIKIS=${WIKIS_JSON}" >> $GITHUB_OUTPUT

      - name: Checkout Wikis
        run: |
          mkdir -p wikis
          echo '[{"name":"skills-wiki","url":"https://github.com/ads42693/skills-github-pages.wiki.git"}]' | jq -c '.[]' | while read -r wiki; do
            name=$(echo "$wiki" | jq -r '.name' | tr ' ' '-')
            url=$(echo "$wiki" | jq -r '.url')
            echo "游댃 Clonando $name desde $url"
            git clone "$url" "wikis/${name}" --depth 1 --single-branch --quiet || true
          done

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Process Wikis
        run: |
          mkdir -p _wikis

          # Procesar todas las wikis: recorre cada directorio dentro de "wikis" (excepto el propio "wikis")
          find wikis -maxdepth 1 -type d -not -name "wikis" | while read -r wiki_dir; do
            wiki_name=$(basename "$wiki_dir")
            
            # Normalizar nombres: convertir espacios a guiones y pasar a min칰sculas
            clean_name=$(echo "$wiki_name" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            
            # Crear directorio de destino para la wiki
            mkdir -p "_wikis/${clean_name}"
            
            # Copiar todos los archivos Markdown a la carpeta correspondiente
            find "$wiki_dir" -name "*.md" -exec cp {} "_wikis/${clean_name}/" \;

            # Recorrer cada archivo Markdown para inyectar el front matter
            for file in _wikis/"${clean_name}"/*.md; do
              # Si el archivo ya tiene front matter, se omite la inyecci칩n.
              if head -n 1 "$file" | grep -q "^---"; then
                echo "El archivo $file ya tiene front matter, se omite inyecci칩n."
              else
                # Extraer el nombre de la p치gina del nombre del archivo (sin la extensi칩n)
                page_title=$(basename "$file" .md)
                # Inyectar el front matter utilizando:
                # - title: el nombre de la p치gina (original) obtenido del nombre del archivo
                # - wiki_source: el nombre normalizado de la wiki (para agrupar si es necesario)
                # - wiki_name: el nombre de la p치gina, igual que title
                frontmatter=$(printf -- '---\nlayout: default\ntitle: "%s"\nwiki_source: "%s"\nwiki_name: "%s"\n---\n\n' "$page_title" "$clean_name" "$page_title")
                tmpfile="${file}.tmp"
                echo "$frontmatter" > "$tmpfile"
                cat "$file" >> "$tmpfile"
                mv "$tmpfile" "$file"
                echo "Front matter inyectado en $file"
              fi
            done
          done

      - name: Build Jekyll site
        env:
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp -r _wikis/* _wiki/
          bundle exec jekyll build --config _config.yml

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4