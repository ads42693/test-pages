name: Deploy Jekyll with Dynamic Wikis

on:
  push:
    branches: [develop]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load Wiki Config
        id: wiki-config
        run: |
          # Verifica si el archivo existe
          if [ ! -f "config/wikis.yml" ]; then
            echo "‚ùå Error: config/wikis.yml no existe"
            exit 1
          fi
          
          # Genera el JSON y maneja errores
          WIKIS_JSON=$(ruby -ryaml -rjson -e "
            begin
              config = YAML.load_file('config/wikis.yml')
              wikis = config['wikis'] || []
              puts JSON.generate(wikis)
            rescue => e
              puts '[]'
              STDERR.puts '‚ö†Ô∏è Error cargando YAML: #{e.message}'
            end")
          
          echo "WIKIS_JSON=$WIKIS_JSON" >> $GITHUB_ENV
          echo "WIKIS<<EOF" >> $GITHUB_OUTPUT
          echo "$WIKIS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Checkout Wikis
        run: |
          mkdir -p wikis
          printf '%s' "${{ steps.wiki-config.outputs.WIKIS }}" | jq -c '.[]' | while read -r wiki; do
            name=$(echo "$wiki" | jq -r '.name' | tr ' ' '-')
            url=$(echo "$wiki" | jq -r '.url')
            echo "üîÑ Clonando $name desde $url"
            if ! git clone "$url" "wikis/${name}" --depth 1 --single-branch --quiet; then
              echo "‚ùå Fall√≥ al clonar $name"
              exit 1
            fi
          done
          echo "Directorios en wikis:"
          ls -la wikis/

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Process Wikis
        run: |
          mkdir -p _wikis
          echo "Procesando wikis..."
          
          find wikis -maxdepth 1 -type d -not -name "wikis" | while read -r wiki_dir; do
            wiki_name=$(basename "$wiki_dir")
            clean_name=$(echo "$wiki_name" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            mkdir -p "_wikis/${clean_name}"
            
            echo "Copiando .md de $wiki_dir a _wikis/${clean_name}"
            find "$wiki_dir" -type f -name "*.md" -exec cp -v {} "_wikis/${clean_name}/" \;
            
            # Verifica si hay archivos copiados
            if [ -z "$(ls -A "_wikis/${clean_name}")" ]; then
              echo "‚ö†Ô∏è No se copiaron archivos .md en $wiki_dir"
            else
              echo "‚úÖ Archivos en _wikis/${clean_name}:"
              ls "_wikis/${clean_name}"
            fi
            
            for file in _wikis/"${clean_name}"/*.md; do
              if head -n 1 "$file" | grep -q "^---"; then
                echo "El archivo $file ya tiene front matter, se omite inyecci√≥n."
              else
                page_title=$(basename "$file" .md)
                frontmatter=$(printf -- '---\nlayout: default\ntitle: "%s"\nwiki_source: "%s"\nwiki_name: "%s"\n---\n\n' "$page_title" "$clean_name" "$page_title")
                tmpfile="${file}.tmp"
                echo "$frontmatter" > "$tmpfile"
                cat "$file" >> "$tmpfile"
                mv "$tmpfile" "$file"
                echo "Front matter inyectado en $file"
              fi
            done
          done
          
          echo "Estructura final de _wikis:"
          tree _wikis/

      - name: Build Jekyll site
        env:
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Crear directorio _wiki si no existe
          mkdir -p _wiki
          
          # Copiar solo si hay archivos en _wikis
          if [ -n "$(ls -A _wikis/)" ]; then
            cp -r _wikis/* _wiki/
          else
            echo "‚ö†Ô∏è _wikis est√° vac√≠o. No se copian archivos."
          fi
          
          bundle exec jekyll build --config _config.yml

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4