name: Deploy Jekyll with Dynamic Wikis

on:
  push:
    branches: [develop]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Load Wiki Config
        id: wiki-config
        run: |
          # Verifica si el archivo existe
          if [ ! -f "config/wikis.yml" ]; then
            echo "‚ùå Error: config/wikis.yml no existe"
            exit 1
          fi

          # Genera el JSON y maneja errores
          WIKIS_JSON=$(ruby -ryaml -rjson -e "begin; wikis = YAML.load_file('config/wikis.yml')['wikis']; wikis = wikis.map { |wiki| wiki.transform_keys(&:to_s) }; puts JSON.generate(wikis); rescue => e; STDERR.puts '‚ö†Ô∏è Error cargando YAML: ' + e.message; puts '[]'; end")
          
          # Guarda el JSON en un archivo para preservar el formato
          echo "$WIKIS_JSON" > wikis.json
          echo "Contenido de WIKIS: $(cat wikis.json)"
          
          # Tambi√©n lo guarda en la salida de GitHub Actions (opcional)
          echo "WIKIS<<EOF" >> $GITHUB_OUTPUT
          cat wikis.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Checkout Wikis
        run: |
          mkdir -p wikis
          # Lee el JSON desde el archivo generado para evitar problemas de formato
          cat wikis.json | jq -c '.[]' | while read -r wiki; do
            name=$(echo "$wiki" | jq -r '.name' | tr ' ' '-')
            url=$(echo "$wiki" | jq -r '.url')
            echo "üîÑ Clonando $name desde $url"
            if ! git clone "$url" "wikis/${name}" --depth 1 --single-branch --quiet; then
              echo "‚ùå Fall√≥ al clonar $name"
              exit 1
            fi
          done
          echo "Listado de directorios en wikis:"
          ls -la wikis

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Process Wikis
        run: |
          mkdir -p _wikis
          echo "üìÇ Listado de archivos en wikis/ antes de procesar:"
          ls -R wikis/

          find wikis -maxdepth 1 -type d -not -name "wikis" | while read -r wiki_dir; do
            wiki_name=$(basename "$wiki_dir")
            clean_name=$(echo "$wiki_name" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            mkdir -p "_wikis/${clean_name}"

            echo "üì• Copiando archivos .md desde $wiki_dir a _wikis/${clean_name}"
            find "$wiki_dir" -maxdepth 2 -type f -name "*.md" | while read -r file; do
              # üîπ Normalizar nombre del archivo
              normalized_name=$(basename "$file" | sed 's/[[:space:]]\+/-/g' | tr '‚Äê' '-' | tr -d '[:cntrl:]')
              new_path="_wikis/${clean_name}/${normalized_name}"

              echo "üîÑ Renombrando y copiando: $file ‚Üí $new_path"
              cp "$file" "$new_path"
            done

            echo "üìÇ Archivos copiados en _wikis/${clean_name}:"
            ls -R "_wikis/${clean_name}"

            for file in _wikis/"${clean_name}"/*.md; do
              if head -n 1 "$file" | grep -q "^---"; then
                echo "‚úÖ El archivo $file ya tiene front matter, se omite inyecci√≥n."
              else
                # üîπ Extraer t√≠tulo limpio eliminando prefijos Blog-, Articulo-, Tutorial-
                page_title=$(basename "$file" .md | sed -E 's/^(Blog-|Articulo-|Tutorial-)//' | sed 's/--/-/g' | tr -s '-' ' ')

                # üîπ Detectar si es un wiki local
                if [[ "$clean_name" == "local-wiki" ]]; then
                  # üîπ Categorizar archivos locales
                  case "$file" in
                    *_Blog-*) category="blogs" ;;
                    *_Articulo-*) category="articulos" ;;
                    *_Tutorial-*) category="tutoriales" ;;
                    *) category="otros" ;;
                  esac

                  # üìù Inyectar breadcrumbs en HTML
                  breadcrumb="<nav><a href='{{ site.baseurl }}/'>Inicio</a> > <a href='{{ site.baseurl }}/${category}/'>${category^}</a> > ${page_title}</nav>"

                  frontmatter=$(printf -- '---\nlayout: default\ntitle: "%s"\nwiki_source: "%s"\ncategories: ["%s"]\n---\n\n%s\n\n' "$page_title" "$clean_name" "$category" "$breadcrumb")
                else
                  # üîπ Wikis externas sin categorizaci√≥n
                  frontmatter=$(printf -- '---\nlayout: default\ntitle: "%s"\nwiki_source: "%s"\n---\n\n' "$page_title" "$clean_name")
                fi

                tmpfile="${file}.tmp"
                echo "$frontmatter" > "$tmpfile"
                cat "$file" >> "$tmpfile"
                mv "$tmpfile" "$file"
                echo "‚úçÔ∏è Front matter inyectado en $file (Categor√≠a: ${category:-'N/A'})"
              fi
            done
          done

          echo "üìÇ Estructura final de _wikis:"
          tree _wikis/

      - name: Build Jekyll site
        env:
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p _wiki
          if [ -n "$(ls -A _wikis/)" ]; then
            cp -r _wikis/* _wiki/
          else
            echo "‚ö†Ô∏è _wikis est√° vac√≠o. No se copian archivos."
          fi
          # üìå Sobrescribir estilos para ocultar "View on GitHub"
          mkdir -p _wiki/assets/css
          echo ".btn[href*='github'] { display: none !important; }" > _wiki/assets/css/custom.css
          echo "‚úÖ Estilos personalizados a√±adidos para ocultar 'View on GitHub'."
          bundle exec jekyll build --config _config.yml

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
